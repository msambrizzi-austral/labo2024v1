vec21 <- c(1, 2, 3)
vec22 <- c(NA, 2, 3, 4, 5)
tryCatch(
result_2 <- compare_vectors(vec21, vec22),
error = function(e) print(e$message)  # Should print "Vectors must be the same length"
)
compare_vectors <- function(vector_1, vector_2){
if (length(vector_1)!=length(vector_2)){
stop("The vectors do not have the same lenght")
}
# Count the number of positions with NA in both vectors
common_na_count <- sum(is.na(vector_1) & is.na(vector_2))
return(common_na_count)
}
vec11 <- c(1, 2, NA, 4, 5)
vec12 <- c(NA, 2, 3, 4, NA)
tryCatch(
result_2 <- compare_vectors(vec11, vec12),
error = function(e) print(e$message)  # Should print "Vectors must be the same length"
)
vec21 <- c(1, 2, 3)
vec22 <- c(NA, 2, 3, 4, 5)
tryCatch(
result_2 <- compare_vectors(vec21, vec22),
error = function(e) print(e$message)  # Should print "Vectors must be the same length"
)
vec11 <- c(1, 2, NA, 4, 5)
vec12 <- c(NA, 2, 3, 4, NA)
tryCatch(
result_1 <- compare_vectors(vec11, vec12),
error = function(e) print(e$message)  # Should print "Vectors must be the same length"
)
rescale01 <- function(input_vector) {
# Check if the inputs are all numeric
if (!all(is.numeric(input_vector))) {
stop("inputs must all be numeric")
}
# Map -Inf to 0 and Inf to 1
rescaled_vector <- ifelse(input_vector == -Inf, 0, ifelse(input_vector == Inf, 1, input_vector))
return(rescaled_vector)
}
# Test case with corrected numeric values
test_vector_1 <- c(1, 2, -Inf, 5, 10, Inf)
result_1 <- rescale01(test_vector_1)
print(result_1)
# Expected output: 0.1, 0.2, 0, 0.5, 1, 1
# Case 2: Numeric vector without -Inf and Inf
test_vector_2 <- c(0.5, 0, 1, 2)
result_2 <- rescale01(test_vector_2)
print(result_2)
# Expected output: 0.5, 0, 1, 2
# Case 3: Non-numeric vector
test_vector_3 <- c("a", "b", "c")
tryCatch(
result_3 <- rescale01(test_vector_3),
print(result_3),
error = function(e) print(e$message)
)
# Expected output: Error message - "inputs must all be numeric"
rescale01 <- function(input_vector) {
# Check if the inputs are all numeric
if (!all(is.numeric(input_vector))) {
stop("inputs must all be numeric")
}
# Map -Inf to 0 and Inf to 1
rescaled_vector <- ifelse(input_vector == -Inf, 0, ifelse(input_vector == Inf, 1, input_vector))
return(rescaled_vector)
}
# Test case with corrected numeric values
test_vector_1 <- c(1, 2, -Inf, 5, 10, Inf)
result_1 <- rescale01(test_vector_1)
print(result_1)
# Expected output: 0.1, 0.2, 0, 0.5, 1, 1
# Case 2: Numeric vector without -Inf and Inf
test_vector_2 <- c(0.5, 0, 1, 2)
result_2 <- rescale01(test_vector_2)
print(result_2)
# Expected output: 0.5, 0, 1, 2
# Case 3: Non-numeric vector
test_vector_3 <- c("a", "b", "c")
tryCatch(
result_3 <- rescale01(test_vector_3),
print(result_3),
error = function(e) print(e$message)
)
# Expected output: Error message - "inputs must all be numeric"
rescale01 <- function(input_vector) {
# Check if the inputs are all numeric
if (!all(is.numeric(input_vector))) {
stop("inputs must all be numeric")
}
# Map -Inf to 0 and Inf to 1
rescaled_vector <- ifelse(input_vector == -Inf, 0, ifelse(input_vector == Inf, 1, input_vector))
return(rescaled_vector)
}
# Test case with corrected numeric values
test_vector_1 <- c(1, 2, -Inf, 5, 10, Inf)
result_1 <- rescale01(test_vector_1)
print(result_1)
# Expected output: 0.1, 0.2, 0, 0.5, 1, 1
# Case 2: Numeric vector without -Inf and Inf
test_vector_2 <- c(0.5, 0, 1, 2)
result_2 <- rescale01(test_vector_2)
print(result_2)
# Expected output: 0.5, 0, 1, 2
# Case 3: Non-numeric vector
test_vector_3 <- c("a", "b", "c")
tryCatch(
result_3 <- rescale01(test_vector_3),
print(result_3),
error = function(e) print(e$message)
)
# Case 3: Non-numeric vector
test_vector_3 <- c("a", "b", "c")
tryCatch(
result_3 <- rescale01(test_vector_3),
print(result_3),
error = function(e) print(e$message)
)
rescale01 <- function(input_vector) {
# Check if the inputs are all numeric
if (!all(is.numeric(input_vector))) {
stop("inputs must all be numeric")
}
# Map -Inf to 0 and Inf to 1
rescaled_vector <- ifelse(input_vector == -Inf, 0, ifelse(input_vector == Inf, 1, input_vector))
return(rescaled_vector)
}
# Test case with corrected numeric values
test_vector_1 <- c(1, 2, -Inf, 5, 10, Inf)
result_1 <- rescale01(test_vector_1)
print(result_1)
# Expected output: 0.1, 0.2, 0, 0.5, 1, 1
# Case 2: Numeric vector without -Inf and Inf
test_vector_2 <- c(0.5, 0, 1, 2)
result_2 <- rescale01(test_vector_2)
print(result_2)
# Expected output: 0.5, 0, 1, 2
# Case 3: Non-numeric vector
test_vector_3 <- c("a", "b", "c")
tryCatch(
result_3 <- rescale01(test_vector_3),
error = function(e) print(e$message)
)
# Expected output: Error message - "inputs must all be numeric"
fl <- flights
library(nycflights13)
library(tidyverse)
head(flights)
names(flights)
fl <- flights
fl2 <- fl %>% select(-(flight:time_hour), -(year:sched_dep_time))
fl2
select(flights, year, year)
select(flights, year, year, month, day, month, year)
select(flights, contains("time"))
select(flights, contains("TIME"))
select(flights, contains("TIME"))
select(flights, contains("TIME"))
select(flights, contains("TIME" | "delay"))
select(flights, contains("TIME") | contains("delay"))
select(flights, contains("TIME") | contains("delay"), carrier_id)
select(flights, contains("TIME") | contains("delay"))
select(flights, contains("TIME") | contains("delay"), carrier_id, carrier)
select(flights, contains("TIME") | contains("delay"), carrier)
select(flights, contains("TIME") | contains("delay"), carrier)
select(flights, contains("TIME") | contains("delay"), carrier)
fl3 <- select(flights, contains("TIME") | contains("delay"), carrier)
View(fl3)
fl %>% filter(month == 9 , day == 9)
fl %>% filter(month == 9 , day == 11)
fl %>% filter(month == 9 , day == 11, distance > 2000)
fl %>% filter(month == 9 , day == 11, distance > 2000)
fl
View(fl)
fl4 %>% filter(month == 9 , day == 11, distance > 2000)
fl4 %>% filter(month == 9 , day == 11, distance > 2000)
fl4 <- fl %>% filter(month == 9 , day == 11, distance > 2000)
flRed <- fl %>% select(dep_time, dep_delay, carrier, air_time, distance, dest ,arr_time)
flRed %>% filter(distance > 4000 | distance < 600)
x <- sqrt(2)
x^2
2 == x^2
near(2, x^2)
fl4 <- fl %>% filter(month == 9 , day %in% c(11,18))
View(fl4)
fl4 <- fl %>% filter(month == 9 , day %in% c(11:18))
View(fl4)
fl4 <- fl %>% filter(month == 9 , day %in% 11:18)
flRed %>% slice_sample(prop = 0.01)
flRed %>% slice_sample(prop = 0.001)
df <- tribble(x=c(1,3,5,7,9,-3,-7,-11))
df <- tibble(x=c(1,3,5,7,9,-3,-7,-11))
df %>% sample(n=5)
df %>% slice_sample(n=5)
df %>% slice_sample(n=5,replace = TRUE)
df %>% slice_sample(n=5,replace = TRUE)
df %>% slice_sample(n=5,replace = TRUE)
df %>% slice_sample(n=5,replace = TRUE)
hflights
hfl <- hflights
hfl <- hflights()
library(hflights)
hfl <- hflights
hfl %>% head()
hfl %>% summarise()
hfl
hfl %>% summarize()
hfl %>% summarise()
hfl %>% names()
# Define cancellation codes
cancellation_codes <- c("A" = "Carrier", "B" = "Weather", "C" = "National Air System", "D" = "Security")
cancellation_codes
# Add Code column to hflights
hflights$Code <- cancellation_codes[hflights$CancellationCode]
# Check replacement
tail(hflights$Code[!is.na(hflights$Code)], n = 20)
# Check replacement
tail(hflights$Code[!is.na(hflights$Code)], n = 100)
View(hfl)
hflights$CancellationCode
# Check replacement
tail(hflights$Code[!is.na(hflights$Code)], n = 100)
# Check replacement
tail(hflights$Code[!is.na(hflights$Code)], n = 120)
# Check replacement
tail(hflights$Code[!is.na(hflights$Code)], n = 20)
hfl %>% select(contains("time"))
hfl %>% select(contains("time" | contains("delay")))
hfl %>% select(contains("time") | contains("delay"))
hfl %>% select(contains("time") | contains("delay") | contains("ID"))
hfl
View(hfl)
hfl %>% select(contains("time") | contains("delay") | "ID")
hfl %>% select(contains("time") | contains("delay") | "ID"))
hfl %>% select(contains("time") | contains("delay")))
hfl %>% select(contains("time") | contains("delay"))
hfl %>% select(contains("time") | contains("delay") | "ID")
hfl %>% select(contains("time") | contains("delay") | "identifier")
hfl %>% names()
hfl %>% filter(ArrDelay > 2)
hfl %>% filter(ArrDelay < 2)
hfl %>% filter(ArrDelay == 0)
lut <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental",
"DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways",
"WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier",
"FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")
names(lut)
flights$carrier_name <- lut[flights$carrier]
flights
View(flights)
View(flights)
glimpse(flights)
flights %>% distinct(dest)
flights %>% distinct(origin, dest)
View(flRed)
flRed %>% mutate(hr_delay = hr_delay/60)
View(fl)
flRed <- fl %>% select(dep_time, dep_delay, carrier, air_time, distance, dest ,arr_time, hr_delay)
View(flights)
library(nycflights13)
library(tidyverse)
head(flights)
names(flights)
f1 <- flights
View(f1)
flights
fl <- flights
library(nycflights13)
library(tidyverse)
head(flights)
names(flights)
fl <- flights
library(hflights)
hflights
hflights <- as.data.frame(hflights)
hflights
fl <- flights%>%
group_by(year,month,day) %>%
select(year, month, day, arr_delay, dep_delay) %>%
summarise(
arr = mean(arr_delay, na.rm = TRUE),
dep = mean(dep_delay, na.rm = TRUE)
) %>%
filter(arr > 30 | dep > 30)
fl <- flights
flRed <- fl %>% select(dep_time, dep_delay, carrier, air_time, distance, dest ,arr_time)
fl  %>%  select(flight:time_hour)
fl <- flights
flRed <- fl %>% select(dep_time, dep_delay, carrier, air_time, distance, dest ,arr_time)
flRed %>% filter(distance > 4000 | distance < 600)
flRed %>% slice_sample(prop = 0.001)
# Define cancellation codes
cancellation_codes <- c("A" = "Carrier", "B" = "Weather", "C" = "National Air System", "D" = "Security")
# Add Code column to hflights
hflights$Code <- cancellation_codes[hflights$CancellationCode]
# Check replacement
tail(hflights$Code[!is.na(hflights$Code)], n = 20)
hfl %>% select(contains("time") | contains("delay"))
hfl %>% filter(ArrDelay == 0)
lut <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental",
"DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways",
"WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier",
"FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")
df <- tibble(x=c(1,3,5,7,9,-3,-7,-11))
df %>% slice_sample(n=5,replace = TRUE)
hfl <- hflights
hfl %>% names()
hfl %>% select(contains("time") | contains("delay"))
hfl %>% filter(ArrDelay == 0)
lut <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental",
"DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways",
"WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier",
"FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")
names(lut)
flights$carrier_name <- lut[flights$carrier]
glimpse(flights)
flights %>% distinct(dest)
flights %>% distinct(origin, dest)
flRed %>% mutate(hr_delay = dep_delay/60)
flRed %>%
mutate(hr_delay = dep_delay/60) %>%
arrange(hr_delay)
flRed %>%
flRed %>%
mutate(hr_delay = dep_delay/60) %>%
arrange(desc(hr_delay))
flights %>% distinct(dest)
flights %>% distinct(origin, dest)
flRed %>%
mutate(hr_delay = dep_delay/60) %>%
arrange(desc(hr_delay))
flRed %>% transmute(hr_delay= dep_delay/60, percentDelay = hr_delay/(air_time/60), carrier)
flights %>%
rename(scheDepTime = sched_dep_time
flights %>%
flights %>% rename(schDepTime = sched_dep_time)
flights
flights <- flights %>% rename(schDepTime = sched_dep_time)
flights
flights %>% summarise(delay = mean(dep_delay))
flights %>% summarise(delay = mean(dep_delay), na.rm = TRUE)
flights %>% summarise(delay = mean(dep_delay), na.rm = TRUE)
flights %>% summarise(delay = mean(dep_delay, na.rm = TRUE))
flights %>% summarise(delay = median(dep_delay, na.rm = TRUE))
flights %>% summarise(dep_delay)
flights %>% summarise(delay = dep_delay)
summary(flights)
not_canceled <- flights %>% filter(!is.na(dep_delay), !is.na(arr_delay))
View(not_canceled)
not_canceled %>%
group_by(year,month, day) %>%
summarise(
avg_delay1 = mean(arr_delay),
avg_delay2 = mean(arr_delay[arr_delay > 0])
)
not_canceled %>%
group_by(year,month, day) %>%
summarise(
first(min(dep_time)),
last(max(dep_time))
)
not_canceled %>%
group_by(year,month, day) %>%
summarise(
first=(min(dep_time)),
last=(max(dep_time))
)
flights
flights
flights
sum(!is.na(flights$dep_time))
sum(is.na(flights$dep_time))
sum(!is.na(flights$dep_time)) + sum(is.na(flights$dep_time))
is.na(flights$dep_time)
mean(is.na(flights$dep_time))
mean(!is.na(flights$dep_time))
flights$dep_time
View(not_canceled)
not_canceled %>% count(tailnum)
flights %>% count(tailnum)
not_canceled %>% count(tailnum, wt = distance)
not_canceled %>% filter(tailnum="D942DN")
not_canceled %>% filter(tailnum=D942DN)
not_canceled %>% filter(tailnum==D942DN)
not_canceled %>% filter(tailnum=="D942DN")
not_canceled %>% filter(tailnum=="D942DN") %>% select(distance)
not_canceled %>% filter(tailnum=="N0EGMQ") %>% select(distance)
not_canceled %>% filter(tailnum=="N0EGMQ") %>% sum(distance)
not_canceled %>% filter(tailnum=="N0EGMQ") %>% select(sum(distance)
not_canceled %>% filter(tailnum=="N0EGMQ") %>% select(sum(distance))
not_canceled %>%
filter(tailnum=="N0EGMQ") %>%
select(sum(distance))
not_canceled %>% count(tailnum, wt = distance)
library(pdftools)
install.packages("pdftools")
library(pdftools)
library(rJava)
install.packages("rJava")
library(pdftools)
library(qpdf)
install.packages("qpdf")
setInternet2(TRUE)
options(repos = "https://cloud.r-project.org/")
install.packages("pdftools")
library(pdftools)
# Leer el contenido de un archivo PDF
text <- pdf_text("itil-foundation-itil-4-edition-spanish-pdf-carlos-rivas-istacuy.pdf")
library(pdftools)
# Leer el contenido de un archivo PDF
text <- pdf_text("itil-foundation-itil-4-edition-spanish-pdf-carlos-rivas-istacuy.pdf")
# Leer el contenido de un archivo PDF
text <- pdf_text("G:\Mi unidad\Libros varios\ITIL\itil-foundation-itil-4-edition-spanish-pdf-carlos-rivas-istacuy.pdf")
# Leer el contenido de un archivo PDF
text <- pdf_text("C:\temp\itil-foundation-itil-4-edition-spanish-pdf-carlos-rivas-istacuy.pdf")
# Leer el contenido de un archivo PDF
text <- pdf_text("C:/temp/itil-foundation-itil-4-edition-spanish-pdf-carlos-rivas-istacuy.pdf")
# Realizar el reemplazo de texto
texto_modificado <- gsub("https://fliphtml5.com/ezkxr/hfuk/ITIL_Foundation_ITIL_4_Edition_%28Spanish_PDF%29/
", "", text)
# Escribir el texto modificado en un nuevo archivo PDF
writeLines(texto_modificado, "nuevo_archivo.pdf")
library(pdftools)
# Leer el contenido de un archivo PDF
text <- pdf_text("C:/temp/itil-foundation-itil-4-edition-spanish-pdf-carlos-rivas-istacuy.pdf")
# Realizar el reemplazo de texto
texto_modificado <- gsub("https://fliphtml5.com/ezkxr/hfuk/ITIL_Foundation_ITIL_4_Edition_%28Spanish_PDF%29/
", "", text)
# Escribir el texto modificado en un nuevo archivo PDF
writeLines(texto_modificado, "c:/temp/nuevo_archivo.pdf")
library(pdftools)
# Leer el contenido de un archivo PDF
text <- pdf_text("C:/temp/itil-foundation-itil-4-edition-spanish-pdf-carlos-rivas-istacuy.pdf")
# Realizar el reemplazo de texto
texto_modificado <- gsub("https://fliphtml5.com/ezkxr/hfuk/ITIL_Foundation_ITIL_4_Edition_%28Spanish_PDF%29/
", "", text)
# Escribir el texto modificado en un nuevo archivo PDF
writeLines(texto_modificado, "c:/temp/nuevo_archivo.pdf")
# Escribir el texto modificado en un nuevo archivo PDF
writeLines(texto_modificado, "c:/temp/nuevo_archivo.pdf")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon') )
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon') )
install.packages(c('pbdZMQ', 'devtools', 'uuid', 'digest'), dependencies=TRUE )
install.packages('languageserver')
library('devtools')
devtools::install_github("ManuelHentschel/vscDebugger")
install.packages('IRkernel')
quit
quit()
# limpio la memoria
rm(list = ls()) # remove all objects
gc() # garbage collection
require("data.table")
require("rpart")
require("rpart.plot")
#setwd("~/buckets/b1/" )  # establezco la carpeta donde voy a trabajar
setwd("~/Maestria/Laboratorio_Implementación_I/labo2024v1/")
# cargo el dataset
dataset <- fread( "./datasets/dataset_pequeno.csv")
dir.create("./exp/", showWarnings = FALSE)
dir.create("./exp/CN4110/", showWarnings = FALSE)
# Establezco el Working Directory DEL EXPERIMENTO
setwd("./exp/CN4110/")
# uso esta semilla para los canaritos
set.seed(102191)
# agrego los siguientes canaritos
for( i in 1:155 ) dataset[ , paste0("canarito", i ) :=  runif( nrow(dataset)) ]
dtrain <- dataset[foto_mes == 202107]
dapply <- dataset[foto_mes == 202109]
dtrain[, clase_binaria2 := ifelse( clase_ternaria=="CONTINUA", "NEG", "POS" ) ]
dtrain[, clase_ternaria := NULL ]
pesos <- dtrain[ , ifelse( clase_binaria2=="POS", 5.0, 1.0 ) ]
# Dejo crecer el arbol sin ninguna limitacion
# sin limite de altura ( 30 es el maximo que permite rpart )
# sin limite de minsplit ( 2 es el minimo natural )
# sin limite de minbukcet( 1 es el minimo natural )
# los canaritos me protegeran
modelo_original <- rpart(
formula = "clase_binaria2 ~ .",
data = dtrain,
model = TRUE,
xval = 0,
cp = -1,
minsplit = 2, # dejo que crezca y corte todo lo que quiera
minbucket = 1,
maxdepth = 30,
weights = pesos
)
# hago el pruning de los canaritos
# haciendo un hackeo a la estructura  modelo_original$frame
# -666 es un valor arbritrariamente negativo que jamas es generado por rpart
modelo_original$frame[
modelo_original$frame$var %like% "canarito",
"complexity"
] <- -666
modelo_pruned <- prune(modelo_original, -666)
prediccion <- predict(modelo_pruned, dapply, type = "prob")[, "POS"]
tb_pred <- dapply[ , list(numero_de_cliente) ]
tb_pred[, prob := prediccion ]
setorder( tb_pred, -prob )
tb_pred[ , Predicted := 0L ]
tb_pred[ 1:11000, Predicted := 1L ]
fwrite( tb_pred[, list(numero_de_cliente, Predicted)],
file= "stopping_at_canaritos.csv",
sep = ",")
pdf(file = "stopping_at_canaritos.pdf", width = 28, height = 4)
prp(modelo_pruned,
extra = 101, digits = -5,
branch = 1, type = 4, varlen = 0, faclen = 0
)
dev.off()
