# Case 2: Numeric vector without -Inf and Inf
test_vector_2 <- c(0.5, 0, 1, 2)
result_2 <- rescale01(test_vector_2)
print(result_2)
# Expected output: 0.5, 0, 1, 2
# Case 3: Non-numeric vector
test_vector_3 <- c("a", "b", "c")
tryCatch(
result_3 <- rescale01(test_vector_3),
error = function(e) print(e$message)
)
# Expected output: Error message - "inputs must all be numeric"
fl <- flights
library(nycflights13)
library(tidyverse)
head(flights)
names(flights)
fl <- flights
fl2 <- fl %>% select(-(flight:time_hour), -(year:sched_dep_time))
fl2
select(flights, year, year)
select(flights, year, year, month, day, month, year)
select(flights, contains("time"))
select(flights, contains("TIME"))
select(flights, contains("TIME"))
select(flights, contains("TIME"))
select(flights, contains("TIME" | "delay"))
select(flights, contains("TIME") | contains("delay"))
select(flights, contains("TIME") | contains("delay"), carrier_id)
select(flights, contains("TIME") | contains("delay"))
select(flights, contains("TIME") | contains("delay"), carrier_id, carrier)
select(flights, contains("TIME") | contains("delay"), carrier)
select(flights, contains("TIME") | contains("delay"), carrier)
select(flights, contains("TIME") | contains("delay"), carrier)
fl3 <- select(flights, contains("TIME") | contains("delay"), carrier)
View(fl3)
fl %>% filter(month == 9 , day == 9)
fl %>% filter(month == 9 , day == 11)
fl %>% filter(month == 9 , day == 11, distance > 2000)
fl %>% filter(month == 9 , day == 11, distance > 2000)
fl
View(fl)
fl4 %>% filter(month == 9 , day == 11, distance > 2000)
fl4 %>% filter(month == 9 , day == 11, distance > 2000)
fl4 <- fl %>% filter(month == 9 , day == 11, distance > 2000)
flRed <- fl %>% select(dep_time, dep_delay, carrier, air_time, distance, dest ,arr_time)
flRed %>% filter(distance > 4000 | distance < 600)
x <- sqrt(2)
x^2
2 == x^2
near(2, x^2)
fl4 <- fl %>% filter(month == 9 , day %in% c(11,18))
View(fl4)
fl4 <- fl %>% filter(month == 9 , day %in% c(11:18))
View(fl4)
fl4 <- fl %>% filter(month == 9 , day %in% 11:18)
flRed %>% slice_sample(prop = 0.01)
flRed %>% slice_sample(prop = 0.001)
df <- tribble(x=c(1,3,5,7,9,-3,-7,-11))
df <- tibble(x=c(1,3,5,7,9,-3,-7,-11))
df %>% sample(n=5)
df %>% slice_sample(n=5)
df %>% slice_sample(n=5,replace = TRUE)
df %>% slice_sample(n=5,replace = TRUE)
df %>% slice_sample(n=5,replace = TRUE)
df %>% slice_sample(n=5,replace = TRUE)
hflights
hfl <- hflights
hfl <- hflights()
library(hflights)
hfl <- hflights
hfl %>% head()
hfl %>% summarise()
hfl
hfl %>% summarize()
hfl %>% summarise()
hfl %>% names()
# Define cancellation codes
cancellation_codes <- c("A" = "Carrier", "B" = "Weather", "C" = "National Air System", "D" = "Security")
cancellation_codes
# Add Code column to hflights
hflights$Code <- cancellation_codes[hflights$CancellationCode]
# Check replacement
tail(hflights$Code[!is.na(hflights$Code)], n = 20)
# Check replacement
tail(hflights$Code[!is.na(hflights$Code)], n = 100)
View(hfl)
hflights$CancellationCode
# Check replacement
tail(hflights$Code[!is.na(hflights$Code)], n = 100)
# Check replacement
tail(hflights$Code[!is.na(hflights$Code)], n = 120)
# Check replacement
tail(hflights$Code[!is.na(hflights$Code)], n = 20)
hfl %>% select(contains("time"))
hfl %>% select(contains("time" | contains("delay")))
hfl %>% select(contains("time") | contains("delay"))
hfl %>% select(contains("time") | contains("delay") | contains("ID"))
hfl
View(hfl)
hfl %>% select(contains("time") | contains("delay") | "ID")
hfl %>% select(contains("time") | contains("delay") | "ID"))
hfl %>% select(contains("time") | contains("delay")))
hfl %>% select(contains("time") | contains("delay"))
hfl %>% select(contains("time") | contains("delay") | "ID")
hfl %>% select(contains("time") | contains("delay") | "identifier")
hfl %>% names()
hfl %>% filter(ArrDelay > 2)
hfl %>% filter(ArrDelay < 2)
hfl %>% filter(ArrDelay == 0)
lut <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental",
"DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways",
"WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier",
"FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")
names(lut)
flights$carrier_name <- lut[flights$carrier]
flights
View(flights)
View(flights)
glimpse(flights)
flights %>% distinct(dest)
flights %>% distinct(origin, dest)
View(flRed)
flRed %>% mutate(hr_delay = hr_delay/60)
View(fl)
flRed <- fl %>% select(dep_time, dep_delay, carrier, air_time, distance, dest ,arr_time, hr_delay)
View(flights)
library(nycflights13)
library(tidyverse)
head(flights)
names(flights)
f1 <- flights
View(f1)
flights
fl <- flights
library(nycflights13)
library(tidyverse)
head(flights)
names(flights)
fl <- flights
library(hflights)
hflights
hflights <- as.data.frame(hflights)
hflights
fl <- flights%>%
group_by(year,month,day) %>%
select(year, month, day, arr_delay, dep_delay) %>%
summarise(
arr = mean(arr_delay, na.rm = TRUE),
dep = mean(dep_delay, na.rm = TRUE)
) %>%
filter(arr > 30 | dep > 30)
fl <- flights
flRed <- fl %>% select(dep_time, dep_delay, carrier, air_time, distance, dest ,arr_time)
fl  %>%  select(flight:time_hour)
fl <- flights
flRed <- fl %>% select(dep_time, dep_delay, carrier, air_time, distance, dest ,arr_time)
flRed %>% filter(distance > 4000 | distance < 600)
flRed %>% slice_sample(prop = 0.001)
# Define cancellation codes
cancellation_codes <- c("A" = "Carrier", "B" = "Weather", "C" = "National Air System", "D" = "Security")
# Add Code column to hflights
hflights$Code <- cancellation_codes[hflights$CancellationCode]
# Check replacement
tail(hflights$Code[!is.na(hflights$Code)], n = 20)
hfl %>% select(contains("time") | contains("delay"))
hfl %>% filter(ArrDelay == 0)
lut <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental",
"DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways",
"WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier",
"FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")
df <- tibble(x=c(1,3,5,7,9,-3,-7,-11))
df %>% slice_sample(n=5,replace = TRUE)
hfl <- hflights
hfl %>% names()
hfl %>% select(contains("time") | contains("delay"))
hfl %>% filter(ArrDelay == 0)
lut <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental",
"DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways",
"WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier",
"FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")
names(lut)
flights$carrier_name <- lut[flights$carrier]
glimpse(flights)
flights %>% distinct(dest)
flights %>% distinct(origin, dest)
flRed %>% mutate(hr_delay = dep_delay/60)
flRed %>%
mutate(hr_delay = dep_delay/60) %>%
arrange(hr_delay)
flRed %>%
flRed %>%
mutate(hr_delay = dep_delay/60) %>%
arrange(desc(hr_delay))
flights %>% distinct(dest)
flights %>% distinct(origin, dest)
flRed %>%
mutate(hr_delay = dep_delay/60) %>%
arrange(desc(hr_delay))
flRed %>% transmute(hr_delay= dep_delay/60, percentDelay = hr_delay/(air_time/60), carrier)
flights %>%
rename(scheDepTime = sched_dep_time
flights %>%
flights %>% rename(schDepTime = sched_dep_time)
flights
flights <- flights %>% rename(schDepTime = sched_dep_time)
flights
flights %>% summarise(delay = mean(dep_delay))
flights %>% summarise(delay = mean(dep_delay), na.rm = TRUE)
flights %>% summarise(delay = mean(dep_delay), na.rm = TRUE)
flights %>% summarise(delay = mean(dep_delay, na.rm = TRUE))
flights %>% summarise(delay = median(dep_delay, na.rm = TRUE))
flights %>% summarise(dep_delay)
flights %>% summarise(delay = dep_delay)
summary(flights)
not_canceled <- flights %>% filter(!is.na(dep_delay), !is.na(arr_delay))
View(not_canceled)
not_canceled %>%
group_by(year,month, day) %>%
summarise(
avg_delay1 = mean(arr_delay),
avg_delay2 = mean(arr_delay[arr_delay > 0])
)
not_canceled %>%
group_by(year,month, day) %>%
summarise(
first(min(dep_time)),
last(max(dep_time))
)
not_canceled %>%
group_by(year,month, day) %>%
summarise(
first=(min(dep_time)),
last=(max(dep_time))
)
flights
flights
flights
sum(!is.na(flights$dep_time))
sum(is.na(flights$dep_time))
sum(!is.na(flights$dep_time)) + sum(is.na(flights$dep_time))
is.na(flights$dep_time)
mean(is.na(flights$dep_time))
mean(!is.na(flights$dep_time))
flights$dep_time
View(not_canceled)
not_canceled %>% count(tailnum)
flights %>% count(tailnum)
not_canceled %>% count(tailnum, wt = distance)
not_canceled %>% filter(tailnum="D942DN")
not_canceled %>% filter(tailnum=D942DN)
not_canceled %>% filter(tailnum==D942DN)
not_canceled %>% filter(tailnum=="D942DN")
not_canceled %>% filter(tailnum=="D942DN") %>% select(distance)
not_canceled %>% filter(tailnum=="N0EGMQ") %>% select(distance)
not_canceled %>% filter(tailnum=="N0EGMQ") %>% sum(distance)
not_canceled %>% filter(tailnum=="N0EGMQ") %>% select(sum(distance)
not_canceled %>% filter(tailnum=="N0EGMQ") %>% select(sum(distance))
not_canceled %>%
filter(tailnum=="N0EGMQ") %>%
select(sum(distance))
not_canceled %>% count(tailnum, wt = distance)
library(pdftools)
install.packages("pdftools")
library(pdftools)
library(rJava)
install.packages("rJava")
library(pdftools)
library(qpdf)
install.packages("qpdf")
setInternet2(TRUE)
options(repos = "https://cloud.r-project.org/")
install.packages("pdftools")
library(pdftools)
# Leer el contenido de un archivo PDF
text <- pdf_text("itil-foundation-itil-4-edition-spanish-pdf-carlos-rivas-istacuy.pdf")
library(pdftools)
# Leer el contenido de un archivo PDF
text <- pdf_text("itil-foundation-itil-4-edition-spanish-pdf-carlos-rivas-istacuy.pdf")
# Leer el contenido de un archivo PDF
text <- pdf_text("G:\Mi unidad\Libros varios\ITIL\itil-foundation-itil-4-edition-spanish-pdf-carlos-rivas-istacuy.pdf")
# Leer el contenido de un archivo PDF
text <- pdf_text("C:\temp\itil-foundation-itil-4-edition-spanish-pdf-carlos-rivas-istacuy.pdf")
# Leer el contenido de un archivo PDF
text <- pdf_text("C:/temp/itil-foundation-itil-4-edition-spanish-pdf-carlos-rivas-istacuy.pdf")
# Realizar el reemplazo de texto
texto_modificado <- gsub("https://fliphtml5.com/ezkxr/hfuk/ITIL_Foundation_ITIL_4_Edition_%28Spanish_PDF%29/
", "", text)
# Escribir el texto modificado en un nuevo archivo PDF
writeLines(texto_modificado, "nuevo_archivo.pdf")
library(pdftools)
# Leer el contenido de un archivo PDF
text <- pdf_text("C:/temp/itil-foundation-itil-4-edition-spanish-pdf-carlos-rivas-istacuy.pdf")
# Realizar el reemplazo de texto
texto_modificado <- gsub("https://fliphtml5.com/ezkxr/hfuk/ITIL_Foundation_ITIL_4_Edition_%28Spanish_PDF%29/
", "", text)
# Escribir el texto modificado en un nuevo archivo PDF
writeLines(texto_modificado, "c:/temp/nuevo_archivo.pdf")
library(pdftools)
# Leer el contenido de un archivo PDF
text <- pdf_text("C:/temp/itil-foundation-itil-4-edition-spanish-pdf-carlos-rivas-istacuy.pdf")
# Realizar el reemplazo de texto
texto_modificado <- gsub("https://fliphtml5.com/ezkxr/hfuk/ITIL_Foundation_ITIL_4_Edition_%28Spanish_PDF%29/
", "", text)
# Escribir el texto modificado en un nuevo archivo PDF
writeLines(texto_modificado, "c:/temp/nuevo_archivo.pdf")
# Escribir el texto modificado en un nuevo archivo PDF
writeLines(texto_modificado, "c:/temp/nuevo_archivo.pdf")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon') )
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon') )
install.packages(c('pbdZMQ', 'devtools', 'uuid', 'digest'), dependencies=TRUE )
install.packages('languageserver')
library('devtools')
devtools::install_github("ManuelHentschel/vscDebugger")
install.packages('IRkernel')
quit
quit()
rm(list = ls()) # Borro todos los objetos
gc() # Garbage Collection
# cargo las librerias que necesito
require("data.table")
require("rpart")
require("ggplot2")
# cambiar aqui los parametros
PARAM <- list()
PARAM$minsplit <- 300
PARAM$minbucket <- 20
PARAM$maxdepth <- 11
particionar <- function(data, division, agrupa = "", campo = "fold",
start = 1, seed = NA) {
if (!is.na(seed)) set.seed(seed)
bloque <- unlist(mapply(
function(x, y) {
rep(y, x)
},
division, seq(from = start, length.out = length(division))
))
data[, (campo) := sample(rep(
bloque,
ceiling(.N / length(bloque))
))[1:.N],
by = agrupa
]
}
setwd("~/buckets/b1/") # Establezco el Working Directory
#cargo MI amada primera semilla, que esta en MI bucket
tabla_semillas <- fread( "./datasets//mis_semillas.txt" )
ksemilla_azar <- tabla_semillas[ 1, semilla ]  # 1 es mi primera semilla
# cargo el dataset
dataset <- fread("./datasets/dataset_pequeno.csv")
# a partir de ahora solo trabajo con 202107, el mes que tiene clase
dataset <- dataset[foto_mes == 202107] # defino donde voy a entrenar
# La division training/testing es 50%, 50%
#  que sea 50/50 se indica con el c(1,1)
particionar(dataset,
division = c(1, 1),
agrupa = "clase_ternaria", seed = ksemilla_azar
)
# Entreno el modelo
# los datos donde voy a entrenar
# aqui es donde se deben probar distintos hiperparametros
modelo <- rpart(
formula = "clase_ternaria ~ . -fold",
data = dataset[fold == 1, ],
xval = 0,
cp = -1,
minsplit = PARAM$minsplit,
minbucket = PARAM$minbucket,
maxdepth = PARAM$maxdepth
)
# aplico el modelo a TODOS los datos, inclusive los de training
prediccion <- predict(modelo, dataset, type = "prob")
# Pego la probabilidad de  BAJA+2
dataset[, prob_baja2 := prediccion[, "BAJA+2"]]
# Dibujo la curva de ganancia acumulada
setorder(dataset, fold, -prob_baja2)
# agrego una columna que es la de las ganancias
# la multiplico por 2 para que ya este normalizada
#  es 2 porque cada fold es el 50%
dataset[, gan := 2 *ifelse(clase_ternaria == "BAJA+2", 117000, -3000)]
dataset[, ganancia_acumulada := cumsum(gan), by = fold]
dataset[, pos := sequence(.N), by = fold]
# Esta hermosa curva muestra como en el mentiroso training
#   la ganancia es siempre mejor que en el real testing
# segundo grafico solo los primeros 20k enviso
gra <- ggplot(
data = dataset[pos <= 20000],
aes( x = pos, y = ganancia_acumulada,
color = ifelse(fold == 1, "train", "test") )
) + geom_line()
print( gra )
cat( "Train gan max: ", dataset[fold==1, max(ganancia_acumulada)], "\n" )
cat( "Test  gan max: ", dataset[fold==2, max(ganancia_acumulada)], "\n" )
setwd("~/Maestria/Laboratorio_Implementación_I/datasets")
rm(list = ls()) # Borro todos los objetos
gc() # Garbage Collection
# cargo las librerias que necesito
require("data.table")
require("rpart")
require("ggplot2")
# cambiar aqui los parametros
PARAM <- list()
PARAM$minsplit <- 300
PARAM$minbucket <- 20
PARAM$maxdepth <- 11
particionar <- function(data, division, agrupa = "", campo = "fold",
start = 1, seed = NA) {
if (!is.na(seed)) set.seed(seed)
bloque <- unlist(mapply(
function(x, y) {
rep(y, x)
},
division, seq(from = start, length.out = length(division))
))
data[, (campo) := sample(rep(
bloque,
ceiling(.N / length(bloque))
))[1:.N],
by = agrupa
]
}
#setwd("~/buckets/b1/") # Establezco el Working Directory
setwd("~/Maestria/Laboratorio_Implementación_I/datasets")
#cargo MI amada primera semilla, que esta en MI bucket
tabla_semillas <- fread( "./datasets//mis_semillas.txt" )
ksemilla_azar <- tabla_semillas[ 1, semilla ]  # 1 es mi primera semilla
#cargo MI amada primera semilla, que esta en MI bucket
tabla_semillas <- fread( "./datasets//mis_semillas.txt" )
rm(list = ls()) # Borro todos los objetos
gc() # Garbage Collection
# cargo las librerias que necesito
require("data.table")
require("rpart")
require("ggplot2")
# cambiar aqui los parametros
PARAM <- list()
PARAM$minsplit <- 300
PARAM$minbucket <- 20
PARAM$maxdepth <- 11
particionar <- function(data, division, agrupa = "", campo = "fold",
start = 1, seed = NA) {
if (!is.na(seed)) set.seed(seed)
bloque <- unlist(mapply(
function(x, y) {
rep(y, x)
},
division, seq(from = start, length.out = length(division))
))
data[, (campo) := sample(rep(
bloque,
ceiling(.N / length(bloque))
))[1:.N],
by = agrupa
]
}
#setwd("~/buckets/b1/") # Establezco el Working Directory
setwd("~/Maestria/Laboratorio_Implementación_I/datasets")
#cargo MI amada primera semilla, que esta en MI bucket
tabla_semillas <- fread( "./datasets//mis_semillas.txt" )
#cargo MI amada primera semilla, que esta en MI bucket
tabla_semillas <- fread( "./datasets//mis_semillas.txt" )
#cargo MI amada primera semilla, que esta en MI bucket
tabla_semillas <- fread( "../datasets//mis_semillas.txt" )
ksemilla_azar <- tabla_semillas[ 1, semilla ]  # 1 es mi primera semilla
# cargo el dataset
dataset <- fread("./datasets/dataset_pequeno.csv")
# cargo el dataset
dataset <- fread("../datasets/dataset_pequeno.csv")
# a partir de ahora solo trabajo con 202107, el mes que tiene clase
dataset <- dataset[foto_mes == 202107] # defino donde voy a entrenar
# La division training/testing es 50%, 50%
#  que sea 50/50 se indica con el c(1,1)
particionar(dataset,
division = c(1, 1),
agrupa = "clase_ternaria", seed = ksemilla_azar
)
# Entreno el modelo
# los datos donde voy a entrenar
# aqui es donde se deben probar distintos hiperparametros
modelo <- rpart(
formula = "clase_ternaria ~ . -fold",
data = dataset[fold == 1, ],
xval = 0,
cp = -1,
minsplit = PARAM$minsplit,
minbucket = PARAM$minbucket,
maxdepth = PARAM$maxdepth
)
# aplico el modelo a TODOS los datos, inclusive los de training
prediccion <- predict(modelo, dataset, type = "prob")
# Pego la probabilidad de  BAJA+2
dataset[, prob_baja2 := prediccion[, "BAJA+2"]]
# Dibujo la curva de ganancia acumulada
setorder(dataset, fold, -prob_baja2)
# agrego una columna que es la de las ganancias
# la multiplico por 2 para que ya este normalizada
#  es 2 porque cada fold es el 50%
dataset[, gan := 2 *ifelse(clase_ternaria == "BAJA+2", 117000, -3000)]
dataset[, ganancia_acumulada := cumsum(gan), by = fold]
dataset[, pos := sequence(.N), by = fold]
# Esta hermosa curva muestra como en el mentiroso training
#   la ganancia es siempre mejor que en el real testing
# segundo grafico solo los primeros 20k enviso
gra <- ggplot(
data = dataset[pos <= 20000],
aes( x = pos, y = ganancia_acumulada,
color = ifelse(fold == 1, "train", "test") )
) + geom_line()
print( gra )
cat( "Train gan max: ", dataset[fold==1, max(ganancia_acumulada)], "\n" )
cat( "Test  gan max: ", dataset[fold==2, max(ganancia_acumulada)], "\n" )
gc()
